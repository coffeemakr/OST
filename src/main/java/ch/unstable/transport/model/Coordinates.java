/**
 * Trasport API
 * The Transport API allows interested developers to build their own applications using public timetable data, whether they're on the web, the desktop or mobile devices. The aim of this inofficial API is to cover public transport within Switzerland. If you are looking for an officially supported source or need to download all data e.g in GTFS format, please check opendata.swiss. The source code of the Transport API can be found on GitHub, please ask any technical questions there. If you need a direct contact write an email to transport@opendata.ch. In order to be kept update on the future development of this API, please subscribe to our low-traffic Google Group.
 *
 * OpenAPI spec version: 1
 * Contact: transport@opendata.ch
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.unstable.transport.model;

import java.math.BigDecimal;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * Coordinates of a location
 **/
@ApiModel(description = "Coordinates of a location")
public class Coordinates {
  
  @SerializedName("type")
  private String type = null;
  @SerializedName("x")
  private BigDecimal x = null;
  @SerializedName("y")
  private BigDecimal y = null;

  /**
   * The type of the given coordinate
   **/
  @ApiModelProperty(value = "The type of the given coordinate")
  public String getType() {
    return type;
  }
  public void setType(String type) {
    this.type = type;
  }

  /**
   * Latitude
   **/
  @ApiModelProperty(value = "Latitude")
  public BigDecimal getX() {
    return x;
  }
  public void setX(BigDecimal x) {
    this.x = x;
  }

  /**
   * Longitude
   **/
  @ApiModelProperty(value = "Longitude")
  public BigDecimal getY() {
    return y;
  }
  public void setY(BigDecimal y) {
    this.y = y;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Coordinates coordinates = (Coordinates) o;
    return (this.type == null ? coordinates.type == null : this.type.equals(coordinates.type)) &&
        (this.x == null ? coordinates.x == null : this.x.equals(coordinates.x)) &&
        (this.y == null ? coordinates.y == null : this.y.equals(coordinates.y));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.type == null ? 0: this.type.hashCode());
    result = 31 * result + (this.x == null ? 0: this.x.hashCode());
    result = 31 * result + (this.y == null ? 0: this.y.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class Coordinates {\n");
    
    sb.append("  type: ").append(type).append("\n");
    sb.append("  x: ").append(x).append("\n");
    sb.append("  y: ").append(y).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
