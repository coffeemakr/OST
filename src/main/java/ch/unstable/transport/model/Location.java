/**
 * Trasport API
 * The Transport API allows interested developers to build their own applications using public timetable data, whether they're on the web, the desktop or mobile devices. The aim of this inofficial API is to cover public transport within Switzerland. If you are looking for an officially supported source or need to download all data e.g in GTFS format, please check opendata.swiss. The source code of the Transport API can be found on GitHub, please ask any technical questions there. If you need a direct contact write an email to transport@opendata.ch. In order to be kept update on the future development of this API, please subscribe to our low-traffic Google Group.
 *
 * OpenAPI spec version: 1
 * Contact: transport@opendata.ch
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.unstable.transport.model;

import ch.unstable.transport.model.Coordinates;
import java.math.BigDecimal;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class Location {
  
  @SerializedName("id")
  private String id = null;
  public enum TypeEnum {
     station,  poi,  address, 
  };
  @SerializedName("type")
  private TypeEnum type = null;
  @SerializedName("name")
  private String name = null;
  @SerializedName("score")
  private BigDecimal score = null;
  @SerializedName("coordinates")
  private Coordinates coordinates = null;
  @SerializedName("distance")
  private BigDecimal distance = null;

  /**
   * The id of the location
   **/
  @ApiModelProperty(value = "The id of the location")
  public String getId() {
    return id;
  }
  public void setId(String id) {
    this.id = id;
  }

  /**
   * Type of the location, can contain:   * station: Location is a train station, bus station   * poi: Location is a point of interest (Clock tower, China garden)   * address: Location is an address   * refine: Location is not defined, the user has to relocate 
   **/
  @ApiModelProperty(value = "Type of the location, can contain:   * station: Location is a train station, bus station   * poi: Location is a point of interest (Clock tower, China garden)   * address: Location is an address   * refine: Location is not defined, the user has to relocate ")
  public TypeEnum getType() {
    return type;
  }
  public void setType(TypeEnum type) {
    this.type = type;
  }

  /**
   * The location name
   **/
  @ApiModelProperty(value = "The location name")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }

  /**
   * The accuracy of the result
   **/
  @ApiModelProperty(value = "The accuracy of the result")
  public BigDecimal getScore() {
    return score;
  }
  public void setScore(BigDecimal score) {
    this.score = score;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Coordinates getCoordinates() {
    return coordinates;
  }
  public void setCoordinates(Coordinates coordinates) {
    this.coordinates = coordinates;
  }

  /**
   * If search has been with coordinates, distance to original point in meters
   **/
  @ApiModelProperty(value = "If search has been with coordinates, distance to original point in meters")
  public BigDecimal getDistance() {
    return distance;
  }
  public void setDistance(BigDecimal distance) {
    this.distance = distance;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Location location = (Location) o;
    return (this.id == null ? location.id == null : this.id.equals(location.id)) &&
        (this.type == null ? location.type == null : this.type.equals(location.type)) &&
        (this.name == null ? location.name == null : this.name.equals(location.name)) &&
        (this.score == null ? location.score == null : this.score.equals(location.score)) &&
        (this.coordinates == null ? location.coordinates == null : this.coordinates.equals(location.coordinates)) &&
        (this.distance == null ? location.distance == null : this.distance.equals(location.distance));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.id == null ? 0: this.id.hashCode());
    result = 31 * result + (this.type == null ? 0: this.type.hashCode());
    result = 31 * result + (this.name == null ? 0: this.name.hashCode());
    result = 31 * result + (this.score == null ? 0: this.score.hashCode());
    result = 31 * result + (this.coordinates == null ? 0: this.coordinates.hashCode());
    result = 31 * result + (this.distance == null ? 0: this.distance.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class Location {\n");
    
    sb.append("  id: ").append(id).append("\n");
    sb.append("  type: ").append(type).append("\n");
    sb.append("  name: ").append(name).append("\n");
    sb.append("  score: ").append(score).append("\n");
    sb.append("  coordinates: ").append(coordinates).append("\n");
    sb.append("  distance: ").append(distance).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
